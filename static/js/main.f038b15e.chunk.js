(this["webpackJsonpapi-specification"]=this["webpackJsonpapi-specification"]||[]).push([[0],{276:function(e,t,n){"use strict";n.r(t);var s,r,i,a,c,o,d,l,p,u,j,b,h,x,O,w,g,v,T,f,k,A,m,y,P,S,I,U,B,E=n(0),$=n.n(E),_=n(37),q=n.n(_),G=(n(48),n.p+"static/media/PetAway_logo.d02bc10a.png"),R=n(6),D=n(21),N=n(7),M=n(282),z=n(280),W=n(284),C=n(33),H=n(283),L=N.a.div(s||(s=Object(R.a)(["\n  text-align: center;\n"]))),F=N.a.header(r||(r=Object(R.a)(["\n  background: linear-gradient(90deg, rgba(37,37,37,1) 0%, rgba(129,129,129,1) 51%, rgba(37,37,37,1) 100%);;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n"]))),J=Object(N.a)(F)(i||(i=Object(R.a)(["\n  align-items: flex-start;\n"]))),K=Object(N.a)(D.b)(a||(a=Object(R.a)(["\n  color: #00A6AA;\n"]))),Q=N.a.img(c||(c=Object(R.a)(["\n  height: 40vmin;\n  pointer-events: none;\n"]))),V=N.a.img(o||(o=Object(R.a)(["\n  height: 200px;\n  pointer-events: none;\n  align-self: center;\n  padding-top: 50px;\n"]))),X=N.a.h1(d||(d=Object(R.a)(["\n  font-size: 48px;\n  margin: 50px 100px;\n  color: #00A6AA;\n  text-shadow: 0px 4px 3px rgba(0,0,0,0.4),\n             0px 8px 13px rgba(0,0,0,0.1),\n             0px 18px 23px rgba(0,0,0,0.1);\n"]))),Y=N.a.p(l||(l=Object(R.a)(["\n  font-size: 20px;\n  color: white;\n  margin: 0 150px;\n"]))),Z=Object(N.a)(D.b)(p||(p=Object(R.a)(["\n  z-index: 2;\n  max-width: 270px;\n  width: 100%;\n  height: 60px;\n  font-weight: 600;\n  font-size: 36px;\n  line-height: 36px;\n  letter-spacing: 0.1em;\n  color: #00A6AA;\n  cursor: pointer;\n  text-shadow: 0px 4px 3px rgba(0,0,0,0.4),\n             0px 8px 13px rgba(0,0,0,0.1),\n             0px 18px 23px rgba(0,0,0,0.1);\n"]))),ee=N.a.div(u||(u=Object(R.a)(["\n  width: 100%;\n  text-align: center;\n  bottom: 0;\n  z-index: 2;\n  padding: 50px 0;\n  cursor: pointer;\n"]))),te=Object(N.a)(X)(j||(j=Object(R.a)(["\n  font-size: 36px;\n  align-self: flex-start;\n  color: white;\n"]))),ne=(N.a.div(b||(b=Object(R.a)(["\n  width: 100%;\n  align-self: flex-start;\n  text-align: left;\n"]))),Object(N.a)(M.a)(h||(h=Object(R.a)(["\n  width: 70%;\n  align-self: flex-start;\n  margin-left: 150px;\n"])))),se=Object(N.a)(M.d)(x||(x=Object(R.a)(["\n  background-color: white;\n  border-radius: 10px;\n  border: 1px solid #00A6AA;\n\n\n"]))),re=N.a.div(O||(O=Object(R.a)(["\n  padding: 10px 0;\n\n"]))),ie=Object(N.a)(M.b)(w||(w=Object(R.a)(["\n  height: 50px;\n  background-color: white;\n  border-radius: 10px;\n  border: 1px solid #00A6AA;\n  cursor: pointer;\n\n"]))),ae=Object(N.a)(z.a)(g||(g=Object(R.a)(["\n"]))),ce=Object(N.a)(M.e)(v||(v=Object(R.a)(["\n  color: black;\n"]))),oe=Object(N.a)(C.a)(T||(T=Object(R.a)(["\n  background-color: ",";\n  border-radius: 30px;\n  border: 1px solid black;\n  height: 20px;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 20px;  \n"])),(function(e){var t=e.action;return"Get"===t?"#03adfc":"Put"===t?"#fcd303":"Post"===t?"#276100":"#9c1503"})),de=Object(N.a)(C.b)(f||(f=Object(R.a)(["\n  width: 70px;\n  text-transform: uppercase;\n"]))),le=N.a.div(k||(k=Object(R.a)(["\n  font-size: 20px;\n  color: black;\n  font-style: italic;\n  display: inline-block;\n  text-align: center;\n  margin-left: 30px;\n"]))),pe=Object(N.a)(W.b)(A||(A=Object(R.a)([""]))),ue=Object(N.a)(W.a)(m||(m=Object(R.a)(["\n  width: 50%;\n  border: none;\n  border-bottom: 1px solid black;\n  cursor: pointer;\n  font-size: 16px;\n  font-weight: 500;\n  font-style: italic;\n\n  &:first-of-type {\n    border-right: 1px solid black;\n  }\n\n  &:hover {\n    background-color: #00A6AA;\n    transition: all .5s ease;\n  }\n"]))),je=Object(N.a)(W.d)(y||(y=Object(R.a)([""]))),be=Object(N.a)(W.c)(P||(P=Object(R.a)(["\n  text-align: left;\n"]))),he=Object(N.a)(W.e)(S||(S=Object(R.a)(["\n\n"]))),xe=N.a.div(I||(I=Object(R.a)(["\n  font-size: 18px;\n  padding: 20px;\n"]))),Oe=N.a.span(U||(U=Object(R.a)(["\n  font-size: 20px;\n  font-style: italic;\n  color: #00A6AA;\n"]))),we=Object(N.a)(H.a)(B||(B=Object(R.a)(["\n  font-size: 20px;\n"]))),ge=n(2),ve=function(){return Object(ge.jsx)(L,{children:Object(ge.jsxs)(F,{children:[Object(ge.jsx)(Q,{src:G,alt:"logo"}),Object(ge.jsx)("p",{children:"API Specification"}),Object(ge.jsx)(K,{to:"/about",children:"Continue"})]})})},Te=[{action:"Get",noun:"User",businessOperation:"getAllUsers",endpoint:"/Users/",desc:"Gets a list of all users",tests:"test('Test #21 - Get all users', () => { \n return request(app)\n .get(MAIN_ROUTE)\n .set('authorization', `bearer ${user.token}`)\n .then((res) => { \n  expect(res.status).toBe(200);\n  expect(res.body.length).toBeGreaterThan(0);\n });\n});"},{action:"Get",noun:"User",businessOperation:"getUserData",endpoint:"/Users/{user_id}",desc:"Gets the data of a selected user",tests:'test("Test #22 - Get single user by id", () => {\n   const user = await userService.add({\n     email: ${Date.now()}@ipca.pt,\n     password: "test\u20ac\u20ac\u20ac\u20ac",\n     userData: {\n       firstName: "Dog",\n       lastName: "Panado",\n       postalCode: "4845-024",\n     },\n   });\n   return request(app)\n     .get(${MAIN_ROUTE}/${user.id})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.lastName).toBe("Panado");\n       expect(res.body.id).toBe(user.id);\n     });\n });'},{action:"Put",noun:"User",businessOperation:"editUser",endpoint:"/Users/{user_id}",desc:"Updates the data of a selected user",tests:'test("Test #23 - Update user", () => {\n   const user = await userService.add({\n     userData: {\n       firstName: "Dog",\n       lastName: "Panado",\n       address_1: "Rua das pedras",\n       address_2: "Lugar do azeite",\n       city: "Famalic\xe3o",\n       zip: "4000-909",\n       country: "Portugal",\n       profilePhoto: "",\n       birthdate: "",\n       phoneNumber: "",\n     },\n   });\n   user.userData.firstName = "cat";\n   return request(app)\n     .put(${MAIN_ROUTE}/${user.id})\n     .send(user)\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.firstName).toBe("cat");\n       expect(res.body.id).toBe(user.id);\n     });\n });'},{action:"Delete",noun:"User",businessOperation:"deleteUser",endpoint:"/Users/{user_id}",desc:"Deletes a selected user",tests:'test("Test #24 - Remove user", () => {\n   const user = await userService.add({\n     email: ${Date.now()}@ipca.pt,\n     password: "test\u20ac\u20ac\u20ac\u20ac",\n     userData: {\n       firstName: "Dog",\n       lastName: "Panado",\n       postalCode: "4845-024",\n     },\n   });\n   user.userData.firstName = "cat";\n   return request(app)\n     .delete(${MAIN_ROUTE}/${user.id})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.firstName).toBe("cat");\n       expect(res.body.id).toBe(user.id);\n     });\n });'},{action:"Get",noun:"Walker",businessOperation:"getAllWalkers",endpoint:"/Walkers/",desc:"Gets a list of all walkers.",tests:'test("Test #26 - Get all walkers", () => {\n   return request(app)\n     .get(MAIN_ROUTE)\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.length).toBeGreaterThan(0);\n     });\n });'},{action:"Get",noun:"Walker",businessOperation:"getWalkerData",endpoint:"/Walkers/{walker_id}",desc:"Gets the data of a selected walker",tests:'test("Test #27 - Get single walker by id", () => {\n   const walker = await WalkerService.add({\n     userId: user.id,\n   });\n   return request(app)\n     .get(${MAIN_ROUTE}/${walker.id})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.id).toBe(walker.id);\n     });\n });'},{action:"Post",noun:"Walker",businessOperation:"createWalker",endpoint:"/Walkers/",desc:"Creates a walker",tests:'test("Test #30 - Create walker", () => {\n   var newPet1 = PetService.add({ type: "Bird" });\n   var newPet2 = PetService.add({ type: "Whale" });\n   var newService = ResourseService.add({ type: "service#" });\n   const newUser = await UserService.add({\n     email: ${Date.now()}@ipca.pt,\n     password: "test\u20ac\u20ac\u20ac\u20ac",\n     userData: {},\n   });\n   return request(app)\n     .post(${MAIN_ROUTE})\n     .send({ pets: [newPet1.id,newPet2.id], services: [newService.id], userId: newUser.id })\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.id).toBe(walker.id);\n     });\n });\n \n \ndescribe("Test #30.1 - Create walker with errors ...", () => {\n   var newPet1 = PetService.getSingle({ type: "Dog" });\n   var newPet2 = PetService.getSingle({ type: "Whale" });\n   var newService = ResourseService.getSingle({ type: "service" });\n   const newUser = await UserService.add({\n     email: ${Date.now()}@ipca.pt,\n     password: "test\u20ac\u20ac\u20ac\u20ac",\n     userData: {},\n   });\n   const testTemplate = (data, errorMessage) => {\n     return request(app)\n       .post(MAIN_ROUTE)\n       .send(data)\n       .then((res) => {\n         expect(res.status).toBe(400);\n         expect(res.body.error).toBe(errorMessage);\n       });\n   };\n   test("Test #30.1.1 - Create new walker without pets", () => {\n     testTemplate({ pets: [], services: [newService.id], userId: newUser.id }, "The pets field is required");\n   });\n   test("Test #30.1.2 -  Create new walker without service", () => {\n     testTemplate({ pets: [newPet1.id,newPet2.id], services: [], userId: newUser.id }, "The service field is required");\n   });\n   test("Test #30.1.3 - Create new walker without user", () => {\n     testTemplate({ pets: [newPet1.id,newPet2.id], services: [newService.id], userId: null }, "The userId field is required");\n   });\n });'},{action:"Put",noun:"Walker",businessOperation:"editWalker",endpoint:"/Walkers/{walker_id}",desc:"Updates the data of a selected walker",tests:'test("Test #28 - Update walker service and pets", () => {\n   var newPet = PetService.add({ type: "Dog" });\n   var newService = ResourseService.add({ type: "service123" });\n   return request(app)\n     .put(${MAIN_ROUTE}/${walker.id})\n     .send({ pets: [newPet.id], services: [newService.id] })\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.id).toBe(walker.id);\n     });\n });'},{action:"Delete",noun:"Walker",businessOperation:"deleteWalker",endpoint:"/Walkers/{walker_id}",desc:"Deletes a selected walker",tests:'test("Test #29 - Remove walker", () => {\n   const walker = await WalkerService.add({\n     userId: user.id,\n   });\n   return request(app)\n     .delete(${MAIN_ROUTE}/${walker.id})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.id).toBe(walker.id);\n     });\n });'},{action:"Post",noun:"Authorization",businessOperation:"doLogin",endpoint:"/Auth/",desc:"Posts a user email and password to authenticate said user",tests:'test("Test #1 - Doing login", () => {\n   return request(app)\n     .post(MAIN_ROUTE)\n     .send({ email: user.email, password: user.password })\n     .then((res) => {\n       user.jwt = res.body.token;\n       expect(res.status).toBe(200);\n       expect(res.body).toHaveProperty("token");\n     });\n });\n \ntest("Test #2 - Doing login with wrong user", () => {\n   return request(app)\n     .post(MAIN_ROUTE)\n     .send({ email: concat(user.email, "not_yet"), password: user.password })\n     .then((res) => {\n       expect(res.status).toBe(400);\n       expect(res.body.error).toBe("Invalid authentication! #1");\n     });\n });\n \ntest("Test #3 - Protected routes", () => {\n   return request(app)\n     .get("/v1/users")\n     .then((res) => {\n       expect(res.status).toBe(401);\n     });\n });\n \ntest("Test #4 - Token Expired", () => {\n   user.jwt = jwt.newToken();\n   return request(app)\n     .get("/v1/users")\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(400);\n       expect(res.body.error).toBe("Invalid authentication! #2");\n     });\n });'},{action:"Post",noun:"Authorization",businessOperation:"createUser",endpoint:"/Auth/signUp",desc:"Creates a user",tests:'test("Test #5 - Doing signup", () => {\n   return request(app)\n     .post(MAIN_ROUTE)\n     .send(user)\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body).toHaveProperty("email");\n     });\n });\n \ndescribe("Test #6 - Doing signup with errors ...", () => {\n   const testTemplate = (data, errorMessage) => {\n     return request(app)\n       .post(MAIN_ROUTE)\n       .send(data)\n       .then((res) => {\n         expect(res.status).toBe(400);\n         expect(res.body.error).toBe(errorMessage);\n       });\n   };\n   test("Test #6.1 - SignUp without firstName", () => {\n     user.firstName = null;\n     testTemplate(user, "The firstName field is required");\n   });\n   test("Test #6.2 - SignUp without lastName", () => {\n     user.lastName = null;\n     testTemplate(user, "The lastName field is required");\n   });\n   test("Test #6.3 - SignUp without postalCode", () => {\n     user.postalCode = null;\n     testTemplate(user, "The postalCode field is required");\n   });\n   test("Test #6.4 - SignUp without password", () => {\n     user.password = null;\n     testTemplate(user, "The password field is required");\n   });\n   test("Test #6.5 - SignUp without email", () => {\n     user.email = null;\n     testTemplate(user, "The email field is required");\n   });\n   test("Test #6.6 - Email duplicated", () => {\n     user.email = _email;\n     testTemplate(user, "Email duplicated");\n   });\n });'},{action:"Post",noun:"Authorization",businessOperation:"forgetPassword",endpoint:"/Auth/forgetPassword",desc:"Sends the e-mail of a user to recover his password",tests:""},{action:"Get",noun:"Service",businessOperation:"getAllServices",endpoint:"/Services/",desc:"Gets a list of all services",tests:'test("Test #14 - Get all services with login", () => {\n   return ResourseService.add({\n     type: "Pet Walking",\n   })\n     .then(() =>\n       request(app).get(MAIN_ROUTE).set("authorization", bearer ${user.token})\n     )\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.length).toBeGreaterThan(0);\n     });\n });\n \ntest("Test #18 - Get all services without login", () => {\n   return ResourseService.add({\n     type: "Pet Walking",\n   })\n     .then(() => request(app).get(MAIN_ROUTE))\n     .then((res) => {\n       expect(res.status).toBe(401);\n       expect(res.body.error).toBe("Invalid authentication! #1");\n     });\n });'},{action:"Get",noun:"Service",businessOperation:"getServiceData",endpoint:"/Services/{service_id}",desc:"Gets the data of a selected service",tests:'test("Test #15 - Get single service by id with login", () => {\n   return request(app)\n     .get(${MAIN_ROUTE}/${1})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.type).toBe("Dog");\n     });\n });\n \ntest("Test #17 - Get single service by id but service dosen\'t exist", () => {\n   return request(app)\n     .get(${MAIN_ROUTE}/${2000})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(400);\n       expect(res.body.error).toBe("Service dosen\'t exist");\n     });\n });\n \ntest("Test #19 - Get single service by id without login", () => {\n   return request(app)\n     .get(${MAIN_ROUTE}/${1})\n     .then((res) => {\n       expect(res.status).toBe(401);\n       expect(res.body.error).toBe("Invalid authentication! #1");\n     });\n });'},{action:"Get",noun:"Pet",businessOperation:"getAllPets",endpoint:"/Pets/",desc:"Gets a list of all pets",tests:'test("Test #9 - Get All Pets with login", () => {\n   await PetService.add({ type: "Dog" });\n   return request(app)\n     .get(MAIN_ROUTE)\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.length).toBeGreaterThan(0);\n     });\n });\n \ntest("Test #11 - Get All Pets without login", () => {\n   const pet = await PetService.add({ type: "Dog" });\n   return request(app)\n     .get(MAIN_ROUTE)\n     .then((res) => {\n       expect(res.status).toBe(401);\n       expect(res.body.error).toBe("Invalid authentication! #1");\n     });\n });'},{action:"Get",noun:"Pet",businessOperation:"getPetData",endpoint:"/Pets/{pet_id}",desc:"Gets the data of a selected pet",tests:'test("Test #10 - Get single Pet by id with login", () => {\n   const pet = await PetService.add({ type: "Dog" });\n   return request(app)\n     .get(${MAIN_ROUTE}/${pet.id})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.type).toBe("Dog");\n     });\n });\n \ntest("Test #12 - Get single Pet by id without login", () => {\n   return request(app)\n     .get(${MAIN_ROUTE}/${1})\n     .then((res) => {\n       expect(res.status).toBe(401);\n       expect(res.body.error).toBe("Invalid authentication! #1");\n     });\n });'},{action:"Post",noun:"Event",businessOperation:"createRequest",endpoint:"/Events/",desc:"Creates a request",tests:'test("Test #33 - Create new event", () => {\n   var newPet = PetService.add({ type: "Shark" });\n   var newService = ResourseService.add({ type: "service##" });\n   newUser = await UserService.add({\n     email: `${Date.now()}@ipca.pt`,\n     password: "test\u20ac\u20ac\u20ac\u20ac",\n     userData: {},\n   });\n   const walker = await WalkerService.add({\n     userId: user.id,\n   });\n   return request(app)\n     .post(`${MAIN_ROUTE}`)\n     .send({ pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  walker.id,date: "30-12-2021"})\n     .set("authorization", `bearer ${user.token}`)\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.id).toBe(event.id);\n     });\n });\n \n \ndescribe("Test #33.1 - Create new event with errors ...", () => {\n   var newPet = PetService.add({ type: "Foca" });\n   var newService = ResourseService.add({ type: "service###" });\n   newUser = await UserService.add({\n     email: `${Date.now()}@ipca.pt`,\n     password: "test\u20ac\u20ac\u20ac\u20ac",\n     userData: {},\n   });\n   userIdToGet = newUser.id;\n   const walker = await WalkerService.add({\n     userId: user.id,\n   });\n   walkerIdToGet = walker.id;\n   const testTemplate = (data, errorMessage) => {\n     return request(app)\n       .post(MAIN_ROUTE)\n       .send(data)\n       .then((res) => {\n         expect(res.status).toBe(400);\n         expect(res.body.error).toBe(errorMessage);\n       });\n   };\n   test("Test #33.1.1 - Create new event without pets", () => {\n     testTemplate({ pets: [], serviceId = newService.id, userId: newUser.id, walkerId:  walker.id,date: "30-12-2021"}, "The pets field is required");\n   });\n   test("Test #33.1.2 -  Create new event without service", () => {\n     testTemplate({ pets: [newPet.id], serviceId = null, userId: newUser.id, walkerId:  walker.id,date: "30-12-2021"}, "The service field is required");\n   });\n   test("Test #33.1.3 - Create new event without user", () => {\n     testTemplate({ pets: [newPet.id], serviceId = newService.id, userId: null, walkerId:  walker.id,date: "30-12-2021"}, "The userId field is required");\n   });\n   test("Test #33.1.4 - Create new event without walker", () => {\n     testTemplate({ pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  null,date: "30-12-2021"}, "The walkerId field is required");\n   });\n   test("Test #33.1.5 - Create new event without date", () => {\n     testTemplate({ pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  null,date: "30-12-2021"}, "The date field is required");\n   });\n   test("Test #33.1.6 - Create new event with the date less than today", () => {\n     testTemplate({ pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  null,date: "12-12-2021"}, "The date field is wrong");\n   });\n });'},{action:"Get",noun:"Event",businessOperation:"getRequestByUser",endpoint:"/Events/{user_id}",desc:"Gets a list of all requests for a selected user",tests:'test("Test #34 - Get all events by user", () => {\n   return request(app)\n     .get(${MAIN_ROUTE}/${userIdToGet})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.length).toBeGreaterThan(0);\n     });\n });'},{action:"Get",noun:"Event",businessOperation:"getRequestByWalker",endpoint:"/Events/{walker_id}",desc:"Gets a list of all requests for a selected walker",tests:'test("Test #35 -  Get all events by walker", () => {\n   return request(app)\n     .get(${MAIN_ROUTE}/${walkerIdToGet})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.length).toBeGreaterThan(0);\n     });\n });'},{action:"Put",noun:"Event",businessOperation:"changeRequestStatus",endpoint:"/Events/{request_id}",desc:"Updates the status of a selected request",tests:'test("Test #36 - Update event status", () => {\n   var newPet = PetService.add({ type: "Shark" });\n   var newService = ResourseService.add({ type: "service##" });\n   newUser = await UserService.add({\n     email: ${Date.now()}@ipca.pt,\n     password: "test\u20ac\u20ac\u20ac\u20ac",\n     userData: {},\n   });\n   const walker = await WalkerService.add({\n     userId: user.id,\n   });\n   const event = EventService.add({pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  walker.id})\n   return request(app)\n     .put(${MAIN_ROUTE}/${event.id})\n     .send({statusId:1})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body).toHaveProperty("userId");\n     });\n });'},{action:"Get",noun:"Event",businessOperation:"getEventByID",endpoint:"/Events/{request_id}",desc:"Gets the data of an event by its id",tests:'test("Test #37 -  Get single event by id", () => {\n   var newPet = PetService.add({ type: "Shark" });\n   var newService = ResourseService.add({ type: "service##" });\n   newUser = await UserService.add({\n     email: ${Date.now()}@ipca.pt,\n     password: "test\u20ac\u20ac\u20ac\u20ac",\n     userData: {},\n   });\n   const walker = await WalkerService.add({\n     userId: user.id,\n   });\n   const event = EventService.add({pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  walker.id})\n   return request(app)\n     .get(${MAIN_ROUTE}/${event.id})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.length).toBeGreaterThan(0);\n     });\n });'}],fe=n(281),ke=function(){return Object(ge.jsx)(L,{children:Object(ge.jsxs)(F,{children:[Object(ge.jsx)(X,{children:"Endpoints"}),Object(ge.jsx)(te,{children:"User"}),Te.map((function(e){return"User"===e.noun?Object(ge.jsx)(ne,{allowMultiple:!1,allowToggle:!0,children:Object(ge.jsx)(re,{children:Object(ge.jsxs)(se,{children:[Object(ge.jsxs)(ie,{children:[Object(ge.jsxs)(ae,{flex:"1",textAlign:"left",children:[Object(ge.jsx)(oe,{action:e.action,children:Object(ge.jsx)(de,{children:e.action})}),Object(ge.jsx)(le,{children:e.desc})]}),Object(ge.jsx)(M.c,{})]}),Object(ge.jsx)(ce,{pb:4,children:Object(ge.jsxs)(he,{variant:"unstyled",children:[Object(ge.jsxs)(pe,{children:[Object(ge.jsx)(ue,{_selected:{bg:"#00A6AA"},children:"Description"}),Object(ge.jsx)(ue,{_selected:{bg:"#00A6AA"},children:"Test"})]}),Object(ge.jsxs)(je,{children:[Object(ge.jsxs)(be,{children:[Object(ge.jsxs)(xe,{children:[Object(ge.jsxs)(Oe,{children:["Business Operation: "," "]}),e.businessOperation]}),Object(ge.jsxs)(xe,{children:[Object(ge.jsxs)(Oe,{children:["Endpoint: "," "]}),e.endpoint]})]}),Object(ge.jsx)(be,{children:Object(ge.jsx)(we,{language:"javascript",style:fe.a,children:e.tests})})]})]})})]})})}):""})),Object(ge.jsx)(te,{children:"Walker"}),Te.map((function(e){return"Walker"===e.noun?Object(ge.jsx)(ne,{allowMultiple:!1,allowToggle:!0,children:Object(ge.jsx)(re,{children:Object(ge.jsxs)(se,{children:[Object(ge.jsxs)(ie,{children:[Object(ge.jsxs)(ae,{flex:"1",textAlign:"left",children:[Object(ge.jsx)(oe,{action:e.action,children:Object(ge.jsx)(de,{children:e.action})}),Object(ge.jsx)(le,{children:e.desc})]}),Object(ge.jsx)(M.c,{})]}),Object(ge.jsx)(ce,{pb:4,children:Object(ge.jsxs)(he,{colorScheme:"green",children:[Object(ge.jsxs)(pe,{children:[Object(ge.jsx)(ue,{_selected:{bg:"#00A6AA"},children:"Description"}),Object(ge.jsx)(ue,{_selected:{bg:"#00A6AA"},children:"Test"})]}),Object(ge.jsxs)(je,{children:[Object(ge.jsxs)(be,{children:[Object(ge.jsxs)(xe,{children:[Object(ge.jsxs)(Oe,{children:["Business Operation: "," "]}),e.businessOperation]}),Object(ge.jsxs)(xe,{children:[Object(ge.jsxs)(Oe,{children:["Endpoint: "," "]}),e.endpoint]})]}),Object(ge.jsx)(be,{children:Object(ge.jsx)(we,{language:"javascript",style:fe.a,children:e.tests})})]})]})})]})})}):""})),Object(ge.jsx)(te,{children:"Authorization"}),Te.map((function(e){return"Authorization"===e.noun?Object(ge.jsx)(ne,{allowMultiple:!1,allowToggle:!0,children:Object(ge.jsx)(re,{children:Object(ge.jsxs)(se,{children:[Object(ge.jsxs)(ie,{children:[Object(ge.jsxs)(ae,{flex:"1",textAlign:"left",children:[Object(ge.jsx)(oe,{action:e.action,children:Object(ge.jsx)(de,{children:e.action})}),Object(ge.jsx)(le,{children:e.desc})]}),Object(ge.jsx)(M.c,{})]}),Object(ge.jsx)(ce,{pb:4,children:Object(ge.jsxs)(he,{colorScheme:"green",children:[Object(ge.jsxs)(pe,{children:[Object(ge.jsx)(ue,{_selected:{bg:"#00A6AA"},children:"Description"}),Object(ge.jsx)(ue,{_selected:{bg:"#00A6AA"},children:"Test"})]}),Object(ge.jsxs)(je,{children:[Object(ge.jsxs)(be,{children:[Object(ge.jsxs)(xe,{children:[Object(ge.jsxs)(Oe,{children:["Business Operation: "," "]}),e.businessOperation]}),Object(ge.jsxs)(xe,{children:[Object(ge.jsxs)(Oe,{children:["Endpoint: "," "]}),e.endpoint]})]}),Object(ge.jsx)(be,{children:Object(ge.jsx)(we,{language:"javascript",style:fe.a,children:e.tests})})]})]})})]})})}):""})),Object(ge.jsx)(te,{children:"Pet"}),Te.map((function(e){return"Pet"===e.noun?Object(ge.jsx)(ne,{allowMultiple:!1,allowToggle:!0,children:Object(ge.jsx)(re,{children:Object(ge.jsxs)(se,{children:[Object(ge.jsxs)(ie,{children:[Object(ge.jsxs)(ae,{flex:"1",textAlign:"left",children:[Object(ge.jsx)(oe,{action:e.action,children:Object(ge.jsx)(de,{children:e.action})}),Object(ge.jsx)(le,{children:e.desc})]}),Object(ge.jsx)(M.c,{})]}),Object(ge.jsx)(ce,{pb:4,children:Object(ge.jsxs)(he,{colorScheme:"green",children:[Object(ge.jsxs)(pe,{children:[Object(ge.jsx)(ue,{_selected:{bg:"#00A6AA"},children:"Description"}),Object(ge.jsx)(ue,{_selected:{bg:"#00A6AA"},children:"Test"})]}),Object(ge.jsxs)(je,{children:[Object(ge.jsxs)(be,{children:[Object(ge.jsxs)(xe,{children:[Object(ge.jsxs)(Oe,{children:["Business Operation: "," "]}),e.businessOperation]}),Object(ge.jsxs)(xe,{children:[Object(ge.jsxs)(Oe,{children:["Endpoint: "," "]}),e.endpoint]})]}),Object(ge.jsx)(be,{children:Object(ge.jsx)(we,{language:"javascript",style:fe.a,children:e.tests})})]})]})})]})})}):""})),Object(ge.jsx)(te,{children:"Service"}),Te.map((function(e){return"Service"===e.noun?Object(ge.jsx)(ne,{allowMultiple:!1,allowToggle:!0,children:Object(ge.jsx)(re,{children:Object(ge.jsxs)(se,{children:[Object(ge.jsxs)(ie,{children:[Object(ge.jsxs)(ae,{flex:"1",textAlign:"left",children:[Object(ge.jsx)(oe,{action:e.action,children:Object(ge.jsx)(de,{children:e.action})}),Object(ge.jsx)(le,{children:e.desc})]}),Object(ge.jsx)(M.c,{})]}),Object(ge.jsx)(ce,{pb:4,children:Object(ge.jsxs)(he,{colorScheme:"green",children:[Object(ge.jsxs)(pe,{children:[Object(ge.jsx)(ue,{_selected:{bg:"#00A6AA"},children:"Description"}),Object(ge.jsx)(ue,{_selected:{bg:"#00A6AA"},children:"Test"})]}),Object(ge.jsxs)(je,{children:[Object(ge.jsxs)(be,{children:[Object(ge.jsxs)(xe,{children:[Object(ge.jsxs)(Oe,{children:["Business Operation: "," "]}),e.businessOperation]}),Object(ge.jsxs)(xe,{children:[Object(ge.jsxs)(Oe,{children:["Endpoint: "," "]}),e.endpoint]})]}),Object(ge.jsx)(be,{children:Object(ge.jsx)(we,{language:"javascript",style:fe.a,children:e.tests})})]})]})})]})})}):""})),Object(ge.jsx)(te,{children:"Events"}),Te.map((function(e){return"Event"===e.noun?Object(ge.jsx)(ne,{allowToggle:!0,children:Object(ge.jsx)(re,{children:Object(ge.jsxs)(se,{children:[Object(ge.jsxs)(ie,{children:[Object(ge.jsxs)(ae,{flex:"1",textAlign:"left",children:[Object(ge.jsx)(oe,{action:e.action,children:Object(ge.jsx)(de,{children:e.action})}),Object(ge.jsx)(le,{children:e.desc})]}),Object(ge.jsx)(M.c,{})]}),Object(ge.jsx)(ce,{pb:4,children:Object(ge.jsxs)(he,{colorScheme:"green",children:[Object(ge.jsxs)(pe,{children:[Object(ge.jsx)(ue,{_selected:{bg:"#00A6AA"},children:"Description"}),Object(ge.jsx)(ue,{_selected:{bg:"#00A6AA"},children:"Test"})]}),Object(ge.jsxs)(je,{children:[Object(ge.jsxs)(be,{children:[Object(ge.jsxs)(xe,{children:[Object(ge.jsxs)(Oe,{children:["Business Operation: "," "]}),e.businessOperation]}),Object(ge.jsxs)(xe,{children:[Object(ge.jsxs)(Oe,{children:["Endpoint: "," "]}),e.endpoint]})]}),Object(ge.jsx)(be,{children:Object(ge.jsx)(we,{language:"javascript",style:fe.a,children:e.tests})})]})]})})]})})}):""})),Object(ge.jsx)(ee,{children:Object(ge.jsx)(Z,{to:"/",children:"Home"})})]})})},Ae=function(){return Object(ge.jsxs)(J,{children:[Object(ge.jsx)(V,{src:G,alt:"logo"}),Object(ge.jsx)(X,{children:"What is a Rest API?"}),Object(ge.jsxs)(Y,{children:["API is short for \u2018Application Programming Interface\u2019 .",Object(ge.jsx)("br",{}),Object(ge.jsx)("br",{}),"An API is a set of rules that lets programs talk to each other, exposing data and functionality across the Internet in a consistent format.",Object(ge.jsx)("br",{}),Object(ge.jsx)("br",{}),"REST stands for \u2018Representational State Transfer\u2019. This is an architectural pattern that describes how distributed systems can expose a consistent interface. When people use the term \u2018REST API\u2019, they are generally referring to an API accessed using the HTTP protocol at a predefined set of URLs.",Object(ge.jsx)("br",{}),Object(ge.jsx)("br",{}),"These URLs represent various resources \u2014 any information or content accessed at that location, which can be returned as JSON, HTML, audio files, or images. Often resources have one or more methods that can be performed on them over HTTP, like GET, POST, PUT, and DELETE. The action represented by the first and last of these is clear, but POST and PUT have specific meanings.",Object(ge.jsx)("br",{}),Object(ge.jsx)("br",{}),"How they are defined is confusing, but the general rule is: use POST to create resources, and PUT to update resources.",Object(ge.jsx)("br",{}),Object(ge.jsx)("br",{}),Object(ge.jsx)("br",{}),Object(ge.jsx)("br",{}),"For example, PetAway\u2019s API power its platform to bring together Petsitters and their clients, providing them with resources to, securely and rapidly, sell or buy a service."]}),Object(ge.jsx)(X,{children:"About PetAway"}),Object(ge.jsxs)(Y,{children:["PetAway is a platform where pet owners can connect with loving pet sitters and walkers.",Object(ge.jsx)("br",{}),Object(ge.jsx)("br",{}),"We empower our community of trusted pet sitters and walkers to run their own pet care businesses on PetAway with the tools and security of our company to back them.",Object(ge.jsx)("br",{}),Object(ge.jsx)("br",{})]}),Object(ge.jsx)(ee,{children:Object(ge.jsx)(Z,{to:"/endpoints",children:"Endpoints"})})]})},me=n(5);var ye=function(){return Object(ge.jsx)(D.a,{children:Object(ge.jsxs)(me.c,{children:[Object(ge.jsx)(me.a,{path:"/endpoints",element:Object(ge.jsx)(ke,{})}),Object(ge.jsx)(me.a,{path:"/about",element:Object(ge.jsx)(Ae,{})}),Object(ge.jsx)(me.a,{path:"/",element:Object(ge.jsx)(ve,{})})]})})},Pe=function(e){e&&e instanceof Function&&n.e(3).then(n.bind(null,285)).then((function(t){var n=t.getCLS,s=t.getFID,r=t.getFCP,i=t.getLCP,a=t.getTTFB;n(e),s(e),r(e),i(e),a(e)}))};q.a.render(Object(ge.jsx)($.a.StrictMode,{children:Object(ge.jsx)(ye,{})}),document.getElementById("root")),Pe()},48:function(e,t,n){}},[[276,1,2]]]);
//# sourceMappingURL=main.f038b15e.chunk.js.map