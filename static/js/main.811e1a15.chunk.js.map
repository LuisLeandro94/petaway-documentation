{"version":3,"sources":["assets/PetAway_logo.png","shared/styles/AppStyles.js","shared/components/Landing.js","shared/components/Lists.js","shared/components/Endpoints.js","shared/components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","Content","header","AboutContent","AppLink","Link","AppLogo","img","AboutLogo","AboutTitle","h1","AboutText","p","EndpointButton","ButtonContainer","EndpointTitle","Acc","Accordion","AccItem","AccordionItem","ItemWrapper","AccButton","AccordionButton","AccBox","Box","AccPanel","AccordionPanel","AccTag","Tag","action","AccTagLabel","TagLabel","EndpointDescription","AccTabList","TabList","AccTab","Tab","AccTabPanels","TabPanels","AccTabPanel","TabPanel","AccTabs","Tabs","BusinessOperation","BOSpan","span","CodeBlock","SyntaxHighlighter","Landing","src","logo","alt","to","EndpointList","noun","businessOperation","endpoint","desc","tests","Endpoints","map","allowMultiple","allowToggle","flex","textAlign","pb","variant","_selected","bg","language","style","dracula","colorScheme","About","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.811e1a15.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/PetAway_logo.d02bc10a.png\";","import { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionButton,\r\n  AccordionPanel,\r\n  Box\r\n} from '@chakra-ui/react'\r\n\r\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react'\r\n\r\nimport {Tag, TagLabel} from '@chakra-ui/tag'\r\n\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\n\r\n\r\nexport const Wrapper = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nexport const Content = styled.header`\r\n  background: linear-gradient(90deg, rgba(37,37,37,1) 0%, rgba(129,129,129,1) 51%, rgba(37,37,37,1) 100%);;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`\r\n\r\nexport const AboutContent = styled(Content)`\r\n  align-items: flex-start;\r\n`\r\n\r\nexport const AppLink = styled(Link)`\r\n  color: #00A6AA;\r\n`\r\n\r\nexport const AppLogo = styled.img`\r\n  height: 40vmin;\r\n  pointer-events: none;\r\n`\r\n\r\nexport const AboutLogo = styled.img`\r\n  height: 200px;\r\n  pointer-events: none;\r\n  align-self: center;\r\n  padding-top: 50px;\r\n`\r\n\r\nexport const AboutTitle = styled.h1`\r\n  font-size: 48px;\r\n  margin: 50px 100px;\r\n  color: #00A6AA;\r\n  text-shadow: 0px 4px 3px rgba(0,0,0,0.4),\r\n             0px 8px 13px rgba(0,0,0,0.1),\r\n             0px 18px 23px rgba(0,0,0,0.1);\r\n`\r\n\r\nexport const AboutText = styled.p`\r\n  font-size: 20px;\r\n  color: white;\r\n  margin: 0 150px;\r\n`\r\n\r\nexport const EndpointButton = styled(Link)`\r\n  z-index: 2;\r\n  max-width: 270px;\r\n  width: 100%;\r\n  height: 60px;\r\n  font-weight: 600;\r\n  font-size: 36px;\r\n  line-height: 36px;\r\n  letter-spacing: 0.1em;\r\n  color: #00A6AA;\r\n  cursor: pointer;\r\n  text-shadow: 0px 4px 3px rgba(0,0,0,0.4),\r\n             0px 8px 13px rgba(0,0,0,0.1),\r\n             0px 18px 23px rgba(0,0,0,0.1);\r\n`\r\n\r\nexport const ButtonContainer = styled.div`\r\n  width: 100%;\r\n  text-align: center;\r\n  bottom: 0;\r\n  z-index: 2;\r\n  padding: 50px 0;\r\n  cursor: pointer;\r\n`\r\n\r\nexport const EndpointTitle = styled(AboutTitle)`\r\n  font-size: 36px;\r\n  align-self: flex-start;\r\n  color: white;\r\n`\r\n\r\nexport const EachCollapse = styled.div`\r\n  width: 100%;\r\n  align-self: flex-start;\r\n  text-align: left;\r\n`\r\n\r\nexport const Acc = styled(Accordion)`\r\n  width: 70%;\r\n  align-self: flex-start;\r\n  margin-left: 150px;\r\n`\r\n\r\nexport const AccItem = styled(AccordionItem)`\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  border: 1px solid #00A6AA;\r\n\r\n\r\n`\r\n\r\nexport const ItemWrapper = styled.div`\r\n  padding: 10px 0;\r\n\r\n`\r\n\r\nexport const AccButton = styled(AccordionButton)`\r\n  height: 50px;\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  border: 1px solid #00A6AA;\r\n  cursor: pointer;\r\n\r\n`\r\n\r\nexport const AccBox = styled(Box)`\r\n` \r\nexport const AccPanel = styled(AccordionPanel)`\r\n  color: black;\r\n`\r\n\r\nexport const AccTag = styled(Tag)`\r\n  background-color: ${({action}) => action === 'Get' ? '#03adfc' : action === 'Put' ? '#fcd303' : action === 'Post' ? '#276100' : '#9c1503'};\r\n  border-radius: 30px;\r\n  border: 1px solid black;\r\n  height: 20px;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  line-height: 20px;  \r\n` \r\n\r\nexport const AccTagLabel = styled(TagLabel)`\r\n  width: 70px;\r\n  text-transform: uppercase;\r\n`\r\n\r\nexport const EndpointDescription = styled.div`\r\n  font-size: 20px;\r\n  color: black;\r\n  font-style: italic;\r\n  display: inline-block;\r\n  text-align: center;\r\n  margin-left: 30px;\r\n`\r\n\r\nexport const AccTabList = styled(TabList)``\r\n\r\nexport const AccTab = styled(Tab)`\r\n  width: 50%;\r\n  border: none;\r\n  border-bottom: 1px solid black;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  font-style: italic;\r\n\r\n  &:first-of-type {\r\n    border-right: 1px solid black;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: #00A6AA;\r\n    transition: all .5s ease;\r\n  }\r\n`\r\n\r\nexport const AccTabPanels = styled(TabPanels)``\r\n\r\nexport const AccTabPanel = styled(TabPanel)`\r\n  text-align: left;\r\n`\r\n\r\nexport const AccTabs = styled(Tabs)`\r\n\r\n` \r\n\r\nexport const BusinessOperation = styled.div`\r\n  font-size: 18px;\r\n  padding: 20px;\r\n`\r\n\r\nexport const BOSpan = styled.span`\r\n  font-size: 20px;\r\n  font-style: italic;\r\n  color: #00A6AA;\r\n`\r\n\r\nexport const CodeBlock = styled(SyntaxHighlighter)`\r\n  font-size: 20px;\r\n`","import React from \"react\";\r\nimport logo from '../../assets/PetAway_logo.png';\r\nimport { AppLink, AppLogo, Content, Wrapper } from '../styles/AppStyles'\r\n\r\nconst Landing = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Content>\r\n        <AppLogo src={logo} alt=\"logo\" />\r\n        <p>\r\n          API Specification\r\n        </p>\r\n        <AppLink\r\n          to='/about'\r\n        >\r\n          Continue\r\n        </AppLink>\r\n      </Content>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Landing","export const EndpointList = [\r\n  {action: 'Get', noun: 'User', businessOperation: 'getAllUsers', endpoint: '/Users/', desc: 'Gets a list of all users', tests: 'test(\\'Test #21 - Get all users\\', () => { \\n return request(app)\\n .get(MAIN_ROUTE)\\n .set(\\'authorization\\', `bearer ${user.token}`)\\n .then((res) => { \\n  expect(res.status).toBe(200);\\n  expect(res.body.length).toBeGreaterThan(0);\\n });\\n});'},\r\n  {action: 'Get', noun: 'User', businessOperation: 'getUserData', endpoint: '/Users/{user_id}', desc: 'Gets the data of a selected user', tests: 'test(\"Test #22 - Get single user by id\", () => {\\n   const user = await userService.add({\\n     email: ${Date.now()}@ipca.pt,\\n     password: \"test€€€€\",\\n     userData: {\\n       firstName: \"Dog\",\\n       lastName: \"Panado\",\\n       postalCode: \"4845-024\",\\n     },\\n   });\\n   return request(app)\\n     .get(${MAIN_ROUTE}/${user.id})\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.lastName).toBe(\"Panado\");\\n       expect(res.body.id).toBe(user.id);\\n     });\\n });'},\r\n  {action: 'Put', noun: 'User', businessOperation: 'editUser', endpoint: '/Users/{user_id}', desc: 'Updates the data of a selected user', tests: 'test(\"Test #23 - Update user\", () => {\\n   const user = await userService.add({\\n     userData: {\\n       firstName: \"Dog\",\\n       lastName: \"Panado\",\\n       address_1: \"Rua das pedras\",\\n       address_2: \"Lugar do azeite\",\\n       city: \"Famalicão\",\\n       zip: \"4000-909\",\\n       country: \"Portugal\",\\n       profilePhoto: \"\",\\n       birthdate: \"\",\\n       phoneNumber: \"\",\\n     },\\n   });\\n   user.userData.firstName = \"cat\";\\n   return request(app)\\n     .put(${MAIN_ROUTE}/${user.id})\\n     .send(user)\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.firstName).toBe(\"cat\");\\n       expect(res.body.id).toBe(user.id);\\n     });\\n });'},\r\n  {action: 'Delete', noun: 'User', businessOperation: 'deleteUser', endpoint: '/Users/{user_id}', desc: 'Deletes a selected user', tests: 'test(\"Test #24 - Remove user\", () => {\\n   const user = await userService.add({\\n     email: ${Date.now()}@ipca.pt,\\n     password: \"test€€€€\",\\n     userData: {\\n       firstName: \"Dog\",\\n       lastName: \"Panado\",\\n       postalCode: \"4845-024\",\\n     },\\n   });\\n   user.userData.firstName = \"cat\";\\n   return request(app)\\n     .delete(${MAIN_ROUTE}/${user.id})\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.firstName).toBe(\"cat\");\\n       expect(res.body.id).toBe(user.id);\\n     });\\n });'},\r\n  {action: 'Get', noun: 'Walker', businessOperation: 'getAllWalkers', endpoint: '/Walkers/', desc: 'Gets a list of all walkers.', tests: 'test(\"Test #26 - Get all walkers\", () => {\\n   return request(app)\\n     .get(MAIN_ROUTE)\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.length).toBeGreaterThan(0);\\n     });\\n });'},\r\n  {action: 'Get', noun: 'Walker', businessOperation: 'getWalkerData', endpoint: '/Walkers/{walker_id}', desc: 'Gets the data of a selected walker', tests: 'test(\"Test #27 - Get single walker by id\", () => {\\n   const walker = await WalkerService.add({\\n     userId: user.id,\\n   });\\n   return request(app)\\n     .get(${MAIN_ROUTE}/${walker.id})\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.id).toBe(walker.id);\\n     });\\n });'},\r\n  {action: 'Post', noun: 'Walker', businessOperation: 'createWalker', endpoint: '/Walkers/', desc: 'Creates a walker', tests: 'test(\"Test #30 - Create walker\", () => {\\n   var newPet1 = PetService.add({ type: \"Bird\" });\\n   var newPet2 = PetService.add({ type: \"Whale\" });\\n   var newService = ResourseService.add({ type: \"service#\" });\\n   const newUser = await UserService.add({\\n     email: ${Date.now()}@ipca.pt,\\n     password: \"test€€€€\",\\n     userData: {},\\n   });\\n   return request(app)\\n     .post(${MAIN_ROUTE})\\n     .send({ pets: [newPet1.id,newPet2.id], services: [newService.id], userId: newUser.id })\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.id).toBe(walker.id);\\n     });\\n });\\n \\n \\ndescribe(\"Test #30.1 - Create walker with errors ...\", () => {\\n   var newPet1 = PetService.getSingle({ type: \"Dog\" });\\n   var newPet2 = PetService.getSingle({ type: \"Whale\" });\\n   var newService = ResourseService.getSingle({ type: \"service\" });\\n   const newUser = await UserService.add({\\n     email: ${Date.now()}@ipca.pt,\\n     password: \"test€€€€\",\\n     userData: {},\\n   });\\n   const testTemplate = (data, errorMessage) => {\\n     return request(app)\\n       .post(MAIN_ROUTE)\\n       .send(data)\\n       .then((res) => {\\n         expect(res.status).toBe(400);\\n         expect(res.body.error).toBe(errorMessage);\\n       });\\n   };\\n   test(\"Test #30.1.1 - Create new walker without pets\", () => {\\n     testTemplate({ pets: [], services: [newService.id], userId: newUser.id }, \"The pets field is required\");\\n   });\\n   test(\"Test #30.1.2 -  Create new walker without service\", () => {\\n     testTemplate({ pets: [newPet1.id,newPet2.id], services: [], userId: newUser.id }, \"The service field is required\");\\n   });\\n   test(\"Test #30.1.3 - Create new walker without user\", () => {\\n     testTemplate({ pets: [newPet1.id,newPet2.id], services: [newService.id], userId: null }, \"The userId field is required\");\\n   });\\n });'},\r\n  {action: 'Put', noun: 'Walker', businessOperation: 'editWalker', endpoint: '/Walkers/{walker_id}', desc: 'Updates the data of a selected walker', tests: 'test(\"Test #28 - Update walker service and pets\", () => {\\n   var newPet = PetService.add({ type: \"Dog\" });\\n   var newService = ResourseService.add({ type: \"service123\" });\\n   return request(app)\\n     .put(${MAIN_ROUTE}/${walker.id})\\n     .send({ pets: [newPet.id], services: [newService.id] })\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.id).toBe(walker.id);\\n     });\\n });'},\r\n  {action: 'Delete', noun: 'Walker', businessOperation: 'deleteWalker', endpoint: '/Walkers/{walker_id}', desc: 'Deletes a selected walker', tests: 'test(\"Test #29 - Remove walker\", () => {\\n   const walker = await WalkerService.add({\\n     userId: user.id,\\n   });\\n   return request(app)\\n     .delete(${MAIN_ROUTE}/${walker.id})\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.id).toBe(walker.id);\\n     });\\n });'},\r\n  {action: 'Post', noun: 'Authorization', businessOperation: 'doLogin', endpoint: '/Auth/', desc: 'Posts a user email and password to authenticate said user', tests: 'test(\"Test #1 - Doing login\", () => {\\n   return request(app)\\n     .post(MAIN_ROUTE)\\n     .send({ email: user.email, password: user.password })\\n     .then((res) => {\\n       user.jwt = res.body.token;\\n       expect(res.status).toBe(200);\\n       expect(res.body).toHaveProperty(\"token\");\\n     });\\n });\\n \\ntest(\"Test #2 - Doing login with wrong user\", () => {\\n   return request(app)\\n     .post(MAIN_ROUTE)\\n     .send({ email: concat(user.email, \"not_yet\"), password: user.password })\\n     .then((res) => {\\n       expect(res.status).toBe(400);\\n       expect(res.body.error).toBe(\"Invalid authentication! #1\");\\n     });\\n });\\n \\ntest(\"Test #3 - Protected routes\", () => {\\n   return request(app)\\n     .get(\"/v1/users\")\\n     .then((res) => {\\n       expect(res.status).toBe(401);\\n     });\\n });\\n \\ntest(\"Test #4 - Token Expired\", () => {\\n   user.jwt = jwt.newToken();\\n   return request(app)\\n     .get(\"/v1/users\")\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(400);\\n       expect(res.body.error).toBe(\"Invalid authentication! #2\");\\n     });\\n });'},\r\n  {action: 'Post', noun: 'Authorization', businessOperation: 'createUser', endpoint: '/Auth/signUp', desc: 'Creates a user', tests: 'test(\"Test #5 - Doing signup\", () => {\\n   return request(app)\\n     .post(MAIN_ROUTE)\\n     .send(user)\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body).toHaveProperty(\"email\");\\n     });\\n });\\n \\ndescribe(\"Test #6 - Doing signup with errors ...\", () => {\\n   const testTemplate = (data, errorMessage) => {\\n     return request(app)\\n       .post(MAIN_ROUTE)\\n       .send(data)\\n       .then((res) => {\\n         expect(res.status).toBe(400);\\n         expect(res.body.error).toBe(errorMessage);\\n       });\\n   };\\n   test(\"Test #6.1 - SignUp without firstName\", () => {\\n     user.firstName = null;\\n     testTemplate(user, \"The firstName field is required\");\\n   });\\n   test(\"Test #6.2 - SignUp without lastName\", () => {\\n     user.lastName = null;\\n     testTemplate(user, \"The lastName field is required\");\\n   });\\n   test(\"Test #6.3 - SignUp without postalCode\", () => {\\n     user.postalCode = null;\\n     testTemplate(user, \"The postalCode field is required\");\\n   });\\n   test(\"Test #6.4 - SignUp without password\", () => {\\n     user.password = null;\\n     testTemplate(user, \"The password field is required\");\\n   });\\n   test(\"Test #6.5 - SignUp without email\", () => {\\n     user.email = null;\\n     testTemplate(user, \"The email field is required\");\\n   });\\n   test(\"Test #6.6 - Email duplicated\", () => {\\n     user.email = _email;\\n     testTemplate(user, \"Email duplicated\");\\n   });\\n });'},\r\n  {action: 'Post', noun: 'Authorization', businessOperation: 'forgetPassword', endpoint: '/Auth/forgetPassword', desc: 'Sends the e-mail of a user to recover his password', tests: ''},\r\n  {action: 'Get', noun: 'Service', businessOperation: 'getAllServices', endpoint: '/Services/', desc: 'Gets a list of all services', tests: 'test(\"Test #14 - Get all services with login\", () => {\\n   return ResourseService.add({\\n     type: \"Pet Walking\",\\n   })\\n     .then(() =>\\n       request(app).get(MAIN_ROUTE).set(\"authorization\", bearer ${user.token})\\n     )\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.length).toBeGreaterThan(0);\\n     });\\n });\\n \\ntest(\"Test #18 - Get all services without login\", () => {\\n   return ResourseService.add({\\n     type: \"Pet Walking\",\\n   })\\n     .then(() => request(app).get(MAIN_ROUTE))\\n     .then((res) => {\\n       expect(res.status).toBe(401);\\n       expect(res.body.error).toBe(\"Invalid authentication! #1\");\\n     });\\n });'},\r\n  {action: 'Get', noun: 'Service', businessOperation: 'getServiceData', endpoint: '/Services/{service_id}', desc: 'Gets the data of a selected service', tests: 'test(\"Test #15 - Get single service by id with login\", () => {\\n   return request(app)\\n     .get(${MAIN_ROUTE}/${1})\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.type).toBe(\"Dog\");\\n     });\\n });\\n \\ntest(\"Test #17 - Get single service by id but service dosen\\'t exist\", () => {\\n   return request(app)\\n     .get(${MAIN_ROUTE}/${2000})\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(400);\\n       expect(res.body.error).toBe(\"Service dosen\\'t exist\");\\n     });\\n });\\n \\ntest(\"Test #19 - Get single service by id without login\", () => {\\n   return request(app)\\n     .get(${MAIN_ROUTE}/${1})\\n     .then((res) => {\\n       expect(res.status).toBe(401);\\n       expect(res.body.error).toBe(\"Invalid authentication! #1\");\\n     });\\n });'},\r\n  {action: 'Get', noun: 'Pet', businessOperation: 'getAllPets', endpoint: '/Pets/', desc: 'Gets a list of all pets', tests: 'test(\"Test #9 - Get All Pets with login\", () => {\\n   await PetService.add({ type: \"Dog\" });\\n   return request(app)\\n     .get(MAIN_ROUTE)\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.length).toBeGreaterThan(0);\\n     });\\n });\\n \\ntest(\"Test #11 - Get All Pets without login\", () => {\\n   const pet = await PetService.add({ type: \"Dog\" });\\n   return request(app)\\n     .get(MAIN_ROUTE)\\n     .then((res) => {\\n       expect(res.status).toBe(401);\\n       expect(res.body.error).toBe(\"Invalid authentication! #1\");\\n     });\\n });'},\r\n  {action: 'Get', noun: 'Pet', businessOperation: 'getPetData', endpoint: '/Pets/{pet_id}', desc: 'Gets the data of a selected pet', tests: 'test(\"Test #10 - Get single Pet by id with login\", () => {\\n   const pet = await PetService.add({ type: \"Dog\" });\\n   return request(app)\\n     .get(${MAIN_ROUTE}/${pet.id})\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.type).toBe(\"Dog\");\\n     });\\n });\\n \\ntest(\"Test #12 - Get single Pet by id without login\", () => {\\n   return request(app)\\n     .get(${MAIN_ROUTE}/${1})\\n     .then((res) => {\\n       expect(res.status).toBe(401);\\n       expect(res.body.error).toBe(\"Invalid authentication! #1\");\\n     });\\n });'},\r\n  {action: 'Post', noun: 'Event', businessOperation: 'createRequest', endpoint: '/Events/', desc: 'Creates a request', tests: 'test(\"Test #33 - Create new event\", () => {\\n   var newPet = PetService.add({ type: \"Shark\" });\\n   var newService = ResourseService.add({ type: \"service##\" });\\n   newUser = await UserService.add({\\n     email: `${Date.now()}@ipca.pt`,\\n     password: \"test€€€€\",\\n     userData: {},\\n   });\\n   const walker = await WalkerService.add({\\n     userId: user.id,\\n   });\\n   return request(app)\\n     .post(`${MAIN_ROUTE}`)\\n     .send({ pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  walker.id,date: \"30-12-2021\"})\\n     .set(\"authorization\", `bearer ${user.token}`)\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.id).toBe(event.id);\\n     });\\n });\\n \\n \\ndescribe(\"Test #33.1 - Create new event with errors ...\", () => {\\n   var newPet = PetService.add({ type: \"Foca\" });\\n   var newService = ResourseService.add({ type: \"service###\" });\\n   newUser = await UserService.add({\\n     email: `${Date.now()}@ipca.pt`,\\n     password: \"test€€€€\",\\n     userData: {},\\n   });\\n   userIdToGet = newUser.id;\\n   const walker = await WalkerService.add({\\n     userId: user.id,\\n   });\\n   walkerIdToGet = walker.id;\\n   const testTemplate = (data, errorMessage) => {\\n     return request(app)\\n       .post(MAIN_ROUTE)\\n       .send(data)\\n       .then((res) => {\\n         expect(res.status).toBe(400);\\n         expect(res.body.error).toBe(errorMessage);\\n       });\\n   };\\n   test(\"Test #33.1.1 - Create new event without pets\", () => {\\n     testTemplate({ pets: [], serviceId = newService.id, userId: newUser.id, walkerId:  walker.id,date: \"30-12-2021\"}, \"The pets field is required\");\\n   });\\n   test(\"Test #33.1.2 -  Create new event without service\", () => {\\n     testTemplate({ pets: [newPet.id], serviceId = null, userId: newUser.id, walkerId:  walker.id,date: \"30-12-2021\"}, \"The service field is required\");\\n   });\\n   test(\"Test #33.1.3 - Create new event without user\", () => {\\n     testTemplate({ pets: [newPet.id], serviceId = newService.id, userId: null, walkerId:  walker.id,date: \"30-12-2021\"}, \"The userId field is required\");\\n   });\\n   test(\"Test #33.1.4 - Create new event without walker\", () => {\\n     testTemplate({ pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  null,date: \"30-12-2021\"}, \"The walkerId field is required\");\\n   });\\n   test(\"Test #33.1.5 - Create new event without date\", () => {\\n     testTemplate({ pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  null,date: \"30-12-2021\"}, \"The date field is required\");\\n   });\\n   test(\"Test #33.1.6 - Create new event with the date less than today\", () => {\\n     testTemplate({ pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  null,date: \"12-12-2021\"}, \"The date field is wrong\");\\n   });\\n });'},\r\n  {action: 'Get', noun: 'Event', businessOperation: 'getRequestByUser', endpoint: '/Events/{user_id}', desc: 'Gets a list of all requests for a selected user', tests: 'test(\"Test #34 - Get all events by user\", () => {\\n   return request(app)\\n     .get(${MAIN_ROUTE}/${userIdToGet})\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.length).toBeGreaterThan(0);\\n     });\\n });'},\r\n  {action: 'Get', noun: 'Event', businessOperation: 'getRequestByWalker', endpoint: '/Events/{walker_id}', desc: 'Gets a list of all requests for a selected walker', tests: 'test(\"Test #35 -  Get all events by walker\", () => {\\n   return request(app)\\n     .get(${MAIN_ROUTE}/${walkerIdToGet})\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.length).toBeGreaterThan(0);\\n     });\\n });'},\r\n  {action: 'Put', noun: 'Event', businessOperation: 'changeRequestStatus', endpoint: '/Events/{request_id}', desc: 'Updates the status of a selected request', tests: 'test(\"Test #36 - Update event status\", () => {\\n   var newPet = PetService.add({ type: \"Shark\" });\\n   var newService = ResourseService.add({ type: \"service##\" });\\n   newUser = await UserService.add({\\n     email: ${Date.now()}@ipca.pt,\\n     password: \"test€€€€\",\\n     userData: {},\\n   });\\n   const walker = await WalkerService.add({\\n     userId: user.id,\\n   });\\n   const event = EventService.add({pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  walker.id})\\n   return request(app)\\n     .put(${MAIN_ROUTE}/${event.id})\\n     .send({statusId:1})\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body).toHaveProperty(\"userId\");\\n     });\\n });'},\r\n  {action: 'Get', noun: 'Event', businessOperation: 'getEventByID', endpoint: '/Events/{request_id}', desc: 'Gets the data of an event by its id', tests: 'test(\"Test #37 -  Get single event by id\", () => {\\n   var newPet = PetService.add({ type: \"Shark\" });\\n   var newService = ResourseService.add({ type: \"service##\" });\\n   newUser = await UserService.add({\\n     email: ${Date.now()}@ipca.pt,\\n     password: \"test€€€€\",\\n     userData: {},\\n   });\\n   const walker = await WalkerService.add({\\n     userId: user.id,\\n   });\\n   const event = EventService.add({pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  walker.id})\\n   return request(app)\\n     .get(${MAIN_ROUTE}/${event.id})\\n     .set(\"authorization\", bearer ${user.token})\\n     .then((res) => {\\n       expect(res.status).toBe(200);\\n       expect(res.body.length).toBeGreaterThan(0);\\n     });\\n });'}\r\n]","import React from \"react\";\r\nimport { AboutTitle, Acc, AccBox, AccButton, AccItem, AccPanel, AccTab, AccTabList, AccTabPanel, AccTabPanels, AccTabs, AccTag, AccTagLabel, BOSpan, BusinessOperation, ButtonContainer, CodeBlock, Content, EndpointButton, EndpointDescription, EndpointTitle, ItemWrapper, Wrapper } from \"../styles/AppStyles\";\r\nimport {\r\n  AccordionIcon,\r\n} from '@chakra-ui/react'\r\n\r\nimport { EndpointList } from \"./Lists\";\r\nimport { dracula } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nconst Endpoints = () => {\r\nreturn (\r\n    <Wrapper>\r\n      <Content>\r\n        <AboutTitle>Endpoints</AboutTitle>\r\n        <EndpointTitle>User</EndpointTitle>\r\n        {EndpointList.map((endpoint) => endpoint.noun === 'User' ? <Acc allowMultiple={false} allowToggle>\r\n          <ItemWrapper>\r\n            <AccItem>\r\n                <AccButton>\r\n                  <AccBox flex='1' textAlign='left'>\r\n                    <AccTag action={endpoint.action}>\r\n                      <AccTagLabel>{endpoint.action}</AccTagLabel>\r\n                    </AccTag>\r\n                    <EndpointDescription>{endpoint.desc}</EndpointDescription>\r\n                  </AccBox>\r\n                  <AccordionIcon />\r\n                </AccButton>\r\n              <AccPanel pb={4}>\r\n                <AccTabs variant='unstyled'>\r\n                  <AccTabList>\r\n                    <AccTab _selected={{bg: '#00A6AA'}}>Description</AccTab>\r\n                    <AccTab _selected={{bg: '#00A6AA'}}>Test</AccTab>\r\n                  </AccTabList>\r\n                  <AccTabPanels>\r\n                    <AccTabPanel>\r\n                      <BusinessOperation>\r\n                        <BOSpan>\r\n                          Business Operation: {' '}\r\n                        </BOSpan>\r\n                        {endpoint.businessOperation}\r\n                      </BusinessOperation>\r\n                      <BusinessOperation>\r\n                      <BOSpan>\r\n                          Endpoint: {' '}\r\n                        </BOSpan>\r\n                        {endpoint.endpoint}\r\n                      </BusinessOperation>\r\n                    </AccTabPanel>\r\n                    <AccTabPanel>\r\n                    <CodeBlock language=\"javascript\" style={dracula}>\r\n                      {endpoint.tests}\r\n                    </CodeBlock>\r\n                    </AccTabPanel>\r\n                  </AccTabPanels>\r\n                </AccTabs>\r\n              </AccPanel>\r\n            </AccItem>\r\n          </ItemWrapper>\r\n        </Acc>\r\n         : '')}\r\n        <EndpointTitle>Walker</EndpointTitle>\r\n        {EndpointList.map((endpoint) => endpoint.noun === 'Walker' ? <Acc allowMultiple={false} allowToggle>\r\n          <ItemWrapper>\r\n            <AccItem>\r\n                <AccButton>\r\n                  <AccBox flex='1' textAlign='left'>\r\n                    <AccTag action={endpoint.action}>\r\n                      <AccTagLabel>{endpoint.action}</AccTagLabel>\r\n                    </AccTag>\r\n                    <EndpointDescription>{endpoint.desc}</EndpointDescription>\r\n                  </AccBox>\r\n                  <AccordionIcon />\r\n                </AccButton>\r\n              <AccPanel pb={4}>\r\n                <AccTabs colorScheme='green'>\r\n                  <AccTabList>\r\n                    <AccTab _selected={{bg: '#00A6AA'}}>Description</AccTab>\r\n                    <AccTab _selected={{bg: '#00A6AA'}}>Test</AccTab>\r\n                  </AccTabList>\r\n                  <AccTabPanels>\r\n                    <AccTabPanel>\r\n                      <BusinessOperation>\r\n                        <BOSpan>\r\n                          Business Operation: {' '}\r\n                        </BOSpan>\r\n                        {endpoint.businessOperation}\r\n                      </BusinessOperation>\r\n                      <BusinessOperation>\r\n                      <BOSpan>\r\n                          Endpoint: {' '}\r\n                        </BOSpan>\r\n                        {endpoint.endpoint}\r\n                      </BusinessOperation>\r\n                    </AccTabPanel>\r\n                    <AccTabPanel>\r\n                    <CodeBlock language=\"javascript\" style={dracula}>\r\n                      {endpoint.tests}\r\n                    </CodeBlock>\r\n                    </AccTabPanel>\r\n                  </AccTabPanels>\r\n                </AccTabs>\r\n              </AccPanel>\r\n            </AccItem>\r\n          </ItemWrapper>\r\n        </Acc>\r\n         : '')}\r\n        <EndpointTitle>Authorization</EndpointTitle>\r\n        {EndpointList.map((endpoint) => endpoint.noun === 'Authorization' ? <Acc allowMultiple={false} allowToggle>\r\n          <ItemWrapper>\r\n            <AccItem>\r\n                <AccButton>\r\n                  <AccBox flex='1' textAlign='left'>\r\n                    <AccTag action={endpoint.action}>\r\n                      <AccTagLabel>{endpoint.action}</AccTagLabel>\r\n                    </AccTag>\r\n                    <EndpointDescription>{endpoint.desc}</EndpointDescription>\r\n                  </AccBox>\r\n                  <AccordionIcon />\r\n                </AccButton>\r\n              <AccPanel pb={4}>\r\n                <AccTabs colorScheme='green'>\r\n                  <AccTabList>\r\n                    <AccTab _selected={{bg: '#00A6AA'}}>Description</AccTab>\r\n                    <AccTab _selected={{bg: '#00A6AA'}}>Test</AccTab>\r\n                  </AccTabList>\r\n                  <AccTabPanels>\r\n                    <AccTabPanel>\r\n                      <BusinessOperation>\r\n                        <BOSpan>\r\n                          Business Operation: {' '}\r\n                        </BOSpan>\r\n                        {endpoint.businessOperation}\r\n                      </BusinessOperation>\r\n                      <BusinessOperation>\r\n                      <BOSpan>\r\n                          Endpoint: {' '}\r\n                        </BOSpan>\r\n                        {endpoint.endpoint}\r\n                      </BusinessOperation>\r\n                    </AccTabPanel>\r\n                    <AccTabPanel>\r\n                    <CodeBlock language=\"javascript\" style={dracula}>\r\n                      {endpoint.tests}\r\n                    </CodeBlock>\r\n                    </AccTabPanel>\r\n                  </AccTabPanels>\r\n                </AccTabs>\r\n              </AccPanel>\r\n            </AccItem>\r\n          </ItemWrapper>\r\n        </Acc>\r\n         : '')}\r\n        <EndpointTitle>Pet</EndpointTitle>\r\n        {EndpointList.map((endpoint) => endpoint.noun === 'Pet' ? <Acc allowMultiple={false} allowToggle>\r\n          <ItemWrapper>\r\n            <AccItem>\r\n                <AccButton>\r\n                  <AccBox flex='1' textAlign='left'>\r\n                    <AccTag action={endpoint.action}>\r\n                      <AccTagLabel>{endpoint.action}</AccTagLabel>\r\n                    </AccTag>\r\n                    <EndpointDescription>{endpoint.desc}</EndpointDescription>\r\n                  </AccBox>\r\n                  <AccordionIcon />\r\n                </AccButton>\r\n              <AccPanel pb={4}>\r\n                <AccTabs colorScheme='green'>\r\n                  <AccTabList>\r\n                    <AccTab _selected={{bg: '#00A6AA'}}>Description</AccTab>\r\n                    <AccTab _selected={{bg: '#00A6AA'}}>Test</AccTab>\r\n                  </AccTabList>\r\n                  <AccTabPanels>\r\n                    <AccTabPanel>\r\n                      <BusinessOperation>\r\n                        <BOSpan>\r\n                          Business Operation: {' '}\r\n                        </BOSpan>\r\n                        {endpoint.businessOperation}\r\n                      </BusinessOperation>\r\n                      <BusinessOperation>\r\n                      <BOSpan>\r\n                          Endpoint: {' '}\r\n                        </BOSpan>\r\n                        {endpoint.endpoint}\r\n                      </BusinessOperation>\r\n                    </AccTabPanel>\r\n                    <AccTabPanel>\r\n                    <CodeBlock language=\"javascript\" style={dracula}>\r\n                      {endpoint.tests}\r\n                    </CodeBlock>\r\n                    </AccTabPanel>\r\n                  </AccTabPanels>\r\n                </AccTabs>\r\n              </AccPanel>\r\n            </AccItem>\r\n          </ItemWrapper>\r\n        </Acc>\r\n         : '')}\r\n        <EndpointTitle>Service</EndpointTitle>\r\n        {EndpointList.map((endpoint) => endpoint.noun === 'Service' ? <Acc allowMultiple={false} allowToggle>\r\n          <ItemWrapper>\r\n            <AccItem>\r\n                <AccButton>\r\n                  <AccBox flex='1' textAlign='left'>\r\n                    <AccTag action={endpoint.action}>\r\n                      <AccTagLabel>{endpoint.action}</AccTagLabel>\r\n                    </AccTag>\r\n                    <EndpointDescription>{endpoint.desc}</EndpointDescription>\r\n                  </AccBox>\r\n                  <AccordionIcon />\r\n                </AccButton>\r\n              <AccPanel pb={4}>\r\n                <AccTabs colorScheme='green'>\r\n                  <AccTabList>\r\n                    <AccTab _selected={{bg: '#00A6AA'}}>Description</AccTab>\r\n                    <AccTab _selected={{bg: '#00A6AA'}}>Test</AccTab>\r\n                  </AccTabList>\r\n                  <AccTabPanels>\r\n                    <AccTabPanel>\r\n                      <BusinessOperation>\r\n                        <BOSpan>\r\n                          Business Operation: {' '}\r\n                        </BOSpan>\r\n                        {endpoint.businessOperation}\r\n                      </BusinessOperation>\r\n                      <BusinessOperation>\r\n                      <BOSpan>\r\n                          Endpoint: {' '}\r\n                        </BOSpan>\r\n                        {endpoint.endpoint}\r\n                      </BusinessOperation>\r\n                    </AccTabPanel>\r\n                    <AccTabPanel>\r\n                    <CodeBlock language=\"javascript\" style={dracula}>\r\n                      {endpoint.tests}\r\n                    </CodeBlock>\r\n                    </AccTabPanel>\r\n                  </AccTabPanels>\r\n                </AccTabs>\r\n              </AccPanel>\r\n            </AccItem>\r\n          </ItemWrapper>\r\n        </Acc>\r\n         : '')}\r\n        <EndpointTitle>Events</EndpointTitle>\r\n        {EndpointList.map((endpoint) => endpoint.noun === 'Event' ? <Acc allowToggle>\r\n          <ItemWrapper>\r\n            <AccItem>\r\n                <AccButton>\r\n                  <AccBox flex='1' textAlign='left'>\r\n                    <AccTag action={endpoint.action}>\r\n                      <AccTagLabel>{endpoint.action}</AccTagLabel>\r\n                    </AccTag>\r\n                    <EndpointDescription>{endpoint.desc}</EndpointDescription>\r\n                  </AccBox>\r\n                  <AccordionIcon />\r\n                </AccButton>\r\n              <AccPanel pb={4}>\r\n                <AccTabs colorScheme='green'>\r\n                  <AccTabList>\r\n                    <AccTab _selected={{bg: '#00A6AA'}}>Description</AccTab>\r\n                    <AccTab _selected={{bg: '#00A6AA'}}>Test</AccTab>\r\n                  </AccTabList>\r\n                  <AccTabPanels>\r\n                    <AccTabPanel>\r\n                      <BusinessOperation>\r\n                        <BOSpan>\r\n                          Business Operation: {' '}\r\n                        </BOSpan>\r\n                        {endpoint.businessOperation}\r\n                      </BusinessOperation>\r\n                      <BusinessOperation>\r\n                      <BOSpan>\r\n                          Endpoint: {' '}\r\n                        </BOSpan>\r\n                        {endpoint.endpoint}\r\n                      </BusinessOperation>\r\n                    </AccTabPanel>\r\n                    <AccTabPanel>\r\n                    <CodeBlock language=\"javascript\" style={dracula}>\r\n                      {endpoint.tests}\r\n                    </CodeBlock>\r\n                    </AccTabPanel>\r\n                  </AccTabPanels>\r\n                </AccTabs>\r\n              </AccPanel>\r\n            </AccItem>\r\n          </ItemWrapper>\r\n        </Acc>\r\n         : '')}\r\n         <ButtonContainer>\r\n           <EndpointButton to='/'>Home</EndpointButton>\r\n         </ButtonContainer>\r\n      </Content>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Endpoints","import React from \"react\";\r\nimport { AboutContent, AboutLogo, AboutText, AboutTitle, ButtonContainer, EndpointButton } from \"../styles/AppStyles\";\r\nimport AppLogo from '../../assets/PetAway_logo.png'\r\n\r\nconst About = () => {\r\n  return (\r\n      <AboutContent>\r\n        <AboutLogo src={AppLogo} alt='logo' />\r\n        <AboutTitle>What is a Rest API?</AboutTitle>\r\n        <AboutText>\r\n          API is short for ‘Application Programming Interface’ . \r\n            <br />\r\n            <br />\r\n          An API is a set of rules that lets programs talk to each other, exposing data and functionality across the Internet in a consistent format.\r\n            <br />\r\n            <br />\r\n          REST stands for ‘Representational State Transfer’. This is an architectural pattern that describes how distributed systems can expose a consistent interface. When people use the term ‘REST API’, they are generally referring to an API accessed using the HTTP protocol at a predefined set of URLs.\r\n            <br />\r\n            <br />\r\n          These URLs represent various resources — any information or content accessed at that location, which can be returned as JSON, HTML, audio files, or images. Often resources have one or more methods that can be performed on them over HTTP, like GET, POST, PUT, and DELETE. The action represented by the first and last of these is clear, but POST and PUT have specific meanings. \r\n            <br />\r\n            <br />\r\n          How they are defined is confusing, but the general rule is: use POST to create resources, and PUT to update resources.\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n          For example, PetAway’s API power its platform to bring together Petsitters and their clients, providing them with resources to, securely and rapidly, sell or buy a service. \r\n        </AboutText>\r\n        <AboutTitle>About PetAway</AboutTitle>\r\n        <AboutText>\r\n          PetAway is a platform where pet owners can connect with loving pet sitters and walkers.\r\n          <br />\r\n          <br />\r\n          We empower our community of trusted pet sitters and walkers to run their own pet care businesses on PetAway with the tools and security of our company to back them.\r\n          <br />\r\n          <br />\r\n        </AboutText>\r\n        <ButtonContainer>\r\n          <EndpointButton to='/endpoints'>Endpoints</EndpointButton>\r\n        </ButtonContainer>\r\n      </AboutContent>\r\n  )\r\n}\r\n\r\nexport default About","import Landing from './shared/components/Landing';\nimport Endpoints from './shared/components/Endpoints'\nimport About from './shared/components/About'\nimport {BrowserRouter as Router, Routes, Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n        <Routes>\n          <Route path='/endpoints' element={<Endpoints />}></Route>\n          <Route path='/about' element={<About />}></Route>\n          <Route path='/' element={<Landing />}>\n          </Route>\n        </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}