export const EndpointList = [
  {action: 'Get', noun: 'User', businessOperation: 'getAllUsers', endpoint: '/Users/', desc: 'Gets a list of all users', tests: 'test(\'Test #21 - Get all users\', () => { \n return request(app)\n .get(MAIN_ROUTE)\n .set(\'authorization\', `bearer ${user.token}`)\n .then((res) => { \n  expect(res.status).toBe(200);\n  expect(res.body.length).toBeGreaterThan(0);\n });\n});'},
  {action: 'Get', noun: 'User', businessOperation: 'getUserData', endpoint: '/Users/{user_id}', desc: 'Gets the data of a selected user', tests: 'test("Test #22 - Get single user by id", () => {\n   const user = await userService.add({\n     email: ${Date.now()}@ipca.pt,\n     password: "test€€€€",\n     userData: {\n       firstName: "Dog",\n       lastName: "Panado",\n       postalCode: "4845-024",\n     },\n   });\n   return request(app)\n     .get(${MAIN_ROUTE}/${user.id})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.lastName).toBe("Panado");\n       expect(res.body.id).toBe(user.id);\n     });\n });'},
  {action: 'Put', noun: 'User', businessOperation: 'editUser', endpoint: '/Users/{user_id}', desc: 'Updates the data of a selected user', tests: 'test("Test #23 - Update user", () => {\n   const user = await userService.add({\n     userData: {\n       firstName: "Dog",\n       lastName: "Panado",\n       address_1: "Rua das pedras",\n       address_2: "Lugar do azeite",\n       city: "Famalicão",\n       zip: "4000-909",\n       country: "Portugal",\n       profilePhoto: "",\n       birthdate: "",\n       phoneNumber: "",\n     },\n   });\n   user.userData.firstName = "cat";\n   return request(app)\n     .put(${MAIN_ROUTE}/${user.id})\n     .send(user)\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.firstName).toBe("cat");\n       expect(res.body.id).toBe(user.id);\n     });\n });'},
  {action: 'Delete', noun: 'User', businessOperation: 'deleteUser', endpoint: '/Users/{user_id}', desc: 'Deletes a selected user', tests: 'test("Test #24 - Remove user", () => {\n   const user = await userService.add({\n     email: ${Date.now()}@ipca.pt,\n     password: "test€€€€",\n     userData: {\n       firstName: "Dog",\n       lastName: "Panado",\n       postalCode: "4845-024",\n     },\n   });\n   user.userData.firstName = "cat";\n   return request(app)\n     .delete(${MAIN_ROUTE}/${user.id})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.firstName).toBe("cat");\n       expect(res.body.id).toBe(user.id);\n     });\n });'},
  {action: 'Get', noun: 'Walker', businessOperation: 'getAllWalkers', endpoint: '/Walkers/', desc: 'Gets a list of all walkers.', tests: 'test("Test #26 - Get all walkers", () => {\n   return request(app)\n     .get(MAIN_ROUTE)\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.length).toBeGreaterThan(0);\n     });\n });'},
  {action: 'Get', noun: 'Walker', businessOperation: 'getWalkerData', endpoint: '/Walkers/{walker_id}', desc: 'Gets the data of a selected walker', tests: 'test("Test #27 - Get single walker by id", () => {\n   const walker = await WalkerService.add({\n     userId: user.id,\n   });\n   return request(app)\n     .get(${MAIN_ROUTE}/${walker.id})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.id).toBe(walker.id);\n     });\n });'},
  {action: 'Post', noun: 'Walker', businessOperation: 'createWalker', endpoint: '/Walkers/', desc: 'Creates a walker', tests: 'test("Test #30 - Create walker", () => {\n   var newPet1 = PetService.add({ type: "Bird" });\n   var newPet2 = PetService.add({ type: "Whale" });\n   var newService = ResourseService.add({ type: "service#" });\n   const newUser = await UserService.add({\n     email: ${Date.now()}@ipca.pt,\n     password: "test€€€€",\n     userData: {},\n   });\n   return request(app)\n     .post(${MAIN_ROUTE})\n     .send({ pets: [newPet1.id,newPet2.id], services: [newService.id], userId: newUser.id })\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.id).toBe(walker.id);\n     });\n });\n \n \ndescribe("Test #30.1 - Create walker with errors ...", () => {\n   var newPet1 = PetService.getSingle({ type: "Dog" });\n   var newPet2 = PetService.getSingle({ type: "Whale" });\n   var newService = ResourseService.getSingle({ type: "service" });\n   const newUser = await UserService.add({\n     email: ${Date.now()}@ipca.pt,\n     password: "test€€€€",\n     userData: {},\n   });\n   const testTemplate = (data, errorMessage) => {\n     return request(app)\n       .post(MAIN_ROUTE)\n       .send(data)\n       .then((res) => {\n         expect(res.status).toBe(400);\n         expect(res.body.error).toBe(errorMessage);\n       });\n   };\n   test("Test #30.1.1 - Create new walker without pets", () => {\n     testTemplate({ pets: [], services: [newService.id], userId: newUser.id }, "The pets field is required");\n   });\n   test("Test #30.1.2 -  Create new walker without service", () => {\n     testTemplate({ pets: [newPet1.id,newPet2.id], services: [], userId: newUser.id }, "The service field is required");\n   });\n   test("Test #30.1.3 - Create new walker without user", () => {\n     testTemplate({ pets: [newPet1.id,newPet2.id], services: [newService.id], userId: null }, "The userId field is required");\n   });\n });'},
  {action: 'Put', noun: 'Walker', businessOperation: 'editWalker', endpoint: '/Walkers/{walker_id}', desc: 'Updates the data of a selected walker', tests: 'test("Test #28 - Update walker service and pets", () => {\n   var newPet = PetService.add({ type: "Dog" });\n   var newService = ResourseService.add({ type: "service123" });\n   return request(app)\n     .put(${MAIN_ROUTE}/${walker.id})\n     .send({ pets: [newPet.id], services: [newService.id] })\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.id).toBe(walker.id);\n     });\n });'},
  {action: 'Delete', noun: 'Walker', businessOperation: 'deleteWalker', endpoint: '/Walkers/{walker_id}', desc: 'Deletes a selected walker', tests: 'test("Test #29 - Remove walker", () => {\n   const walker = await WalkerService.add({\n     userId: user.id,\n   });\n   return request(app)\n     .delete(${MAIN_ROUTE}/${walker.id})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.id).toBe(walker.id);\n     });\n });'},
  {action: 'Post', noun: 'Authorization', businessOperation: 'doLogin', endpoint: '/Auth/', desc: 'Posts a user email and password to authenticate said user', tests: 'test("Test #1 - Doing login", () => {\n   return request(app)\n     .post(MAIN_ROUTE)\n     .send({ email: user.email, password: user.password })\n     .then((res) => {\n       user.jwt = res.body.token;\n       expect(res.status).toBe(200);\n       expect(res.body).toHaveProperty("token");\n     });\n });\n \ntest("Test #2 - Doing login with wrong user", () => {\n   return request(app)\n     .post(MAIN_ROUTE)\n     .send({ email: concat(user.email, "not_yet"), password: user.password })\n     .then((res) => {\n       expect(res.status).toBe(400);\n       expect(res.body.error).toBe("Invalid authentication! #1");\n     });\n });\n \ntest("Test #3 - Protected routes", () => {\n   return request(app)\n     .get("/v1/users")\n     .then((res) => {\n       expect(res.status).toBe(401);\n     });\n });\n \ntest("Test #4 - Token Expired", () => {\n   user.jwt = jwt.newToken();\n   return request(app)\n     .get("/v1/users")\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(400);\n       expect(res.body.error).toBe("Invalid authentication! #2");\n     });\n });'},
  {action: 'Post', noun: 'Authorization', businessOperation: 'createUser', endpoint: '/Auth/signUp', desc: 'Creates a user', tests: 'test("Test #5 - Doing signup", () => {\n   return request(app)\n     .post(MAIN_ROUTE)\n     .send(user)\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body).toHaveProperty("email");\n     });\n });\n \ndescribe("Test #6 - Doing signup with errors ...", () => {\n   const testTemplate = (data, errorMessage) => {\n     return request(app)\n       .post(MAIN_ROUTE)\n       .send(data)\n       .then((res) => {\n         expect(res.status).toBe(400);\n         expect(res.body.error).toBe(errorMessage);\n       });\n   };\n   test("Test #6.1 - SignUp without firstName", () => {\n     user.firstName = null;\n     testTemplate(user, "The firstName field is required");\n   });\n   test("Test #6.2 - SignUp without lastName", () => {\n     user.lastName = null;\n     testTemplate(user, "The lastName field is required");\n   });\n   test("Test #6.3 - SignUp without postalCode", () => {\n     user.postalCode = null;\n     testTemplate(user, "The postalCode field is required");\n   });\n   test("Test #6.4 - SignUp without password", () => {\n     user.password = null;\n     testTemplate(user, "The password field is required");\n   });\n   test("Test #6.5 - SignUp without email", () => {\n     user.email = null;\n     testTemplate(user, "The email field is required");\n   });\n   test("Test #6.6 - Email duplicated", () => {\n     user.email = _email;\n     testTemplate(user, "Email duplicated");\n   });\n });'},
  {action: 'Post', noun: 'Authorization', businessOperation: 'forgetPassword', endpoint: '/Auth/forgetPassword', desc: 'Sends the e-mail of a user to recover his password', tests: 'test("Test #0 - Forget password", () => {\n return request(app)\n .post(MAIN_ROUTE)\n .send({ email: user.email, password: user.password })\n .then((res) => {\n  expect(res.status).toBe(200);\n  expect(res.body).toHaveProperty("token");\n });\n});\n \ndescribe("Test #0.1 - Forget password with errors ...", () => {\n const testTemplate = (data, errorMessage) => {\n return request(app)\n .post(MAIN_ROUTE)\n .send(data)\n .then((res) => {\n  expect(res.status).toBe(400);\n  expect(res.body.error).toBe(errorMessage);\n });\n};\n \ntest("Test #0.1.1 - Forget password without email", () => {\n testTemplate(\n { email: null, password: user.password },\n "The email field is required"\n );\n});\n \ntest("Test #0.1.2 -  Forget password without password", () => {\n testTemplate(\n { email: user.email, password: null },\n "The password field is required"\n );\n });\n});'},
  {action: 'Get', noun: 'Service', businessOperation: 'getAllServices', endpoint: '/Services/', desc: 'Gets a list of all services', tests: 'test("Test #14 - Get all services with login", () => {\n   return ResourseService.add({\n     type: "Pet Walking",\n   })\n     .then(() =>\n       request(app).get(MAIN_ROUTE).set("authorization", bearer ${user.token})\n     )\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.length).toBeGreaterThan(0);\n     });\n });\n \ntest("Test #18 - Get all services without login", () => {\n   return ResourseService.add({\n     type: "Pet Walking",\n   })\n     .then(() => request(app).get(MAIN_ROUTE))\n     .then((res) => {\n       expect(res.status).toBe(401);\n       expect(res.body.error).toBe("Invalid authentication! #1");\n     });\n });'},
  {action: 'Get', noun: 'Service', businessOperation: 'getServiceData', endpoint: '/Services/{service_id}', desc: 'Gets the data of a selected service', tests: 'test("Test #15 - Get single service by id with login", () => {\n   return request(app)\n     .get(${MAIN_ROUTE}/${1})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.type).toBe("Dog");\n     });\n });\n \ntest("Test #17 - Get single service by id but service dosen\'t exist", () => {\n   return request(app)\n     .get(${MAIN_ROUTE}/${2000})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(400);\n       expect(res.body.error).toBe("Service dosen\'t exist");\n     });\n });\n \ntest("Test #19 - Get single service by id without login", () => {\n   return request(app)\n     .get(${MAIN_ROUTE}/${1})\n     .then((res) => {\n       expect(res.status).toBe(401);\n       expect(res.body.error).toBe("Invalid authentication! #1");\n     });\n });'},
  {action: 'Get', noun: 'Pet', businessOperation: 'getAllPets', endpoint: '/Pets/', desc: 'Gets a list of all pets', tests: 'test("Test #9 - Get All Pets with login", () => {\n   await PetService.add({ type: "Dog" });\n   return request(app)\n     .get(MAIN_ROUTE)\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.length).toBeGreaterThan(0);\n     });\n });\n \ntest("Test #11 - Get All Pets without login", () => {\n   const pet = await PetService.add({ type: "Dog" });\n   return request(app)\n     .get(MAIN_ROUTE)\n     .then((res) => {\n       expect(res.status).toBe(401);\n       expect(res.body.error).toBe("Invalid authentication! #1");\n     });\n });'},
  {action: 'Get', noun: 'Pet', businessOperation: 'getPetData', endpoint: '/Pets/{pet_id}', desc: 'Gets the data of a selected pet', tests: 'test("Test #10 - Get single Pet by id with login", () => {\n   const pet = await PetService.add({ type: "Dog" });\n   return request(app)\n     .get(${MAIN_ROUTE}/${pet.id})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.type).toBe("Dog");\n     });\n });\n \ntest("Test #12 - Get single Pet by id without login", () => {\n   return request(app)\n     .get(${MAIN_ROUTE}/${1})\n     .then((res) => {\n       expect(res.status).toBe(401);\n       expect(res.body.error).toBe("Invalid authentication! #1");\n     });\n });'},
  {action: 'Post', noun: 'Event', businessOperation: 'createRequest', endpoint: '/Events/', desc: 'Creates a request', tests: 'test("Test #33 - Create new event", () => {\n   var newPet = PetService.add({ type: "Shark" });\n   var newService = ResourseService.add({ type: "service##" });\n   newUser = await UserService.add({\n     email: `${Date.now()}@ipca.pt`,\n     password: "test€€€€",\n     userData: {},\n   });\n   const walker = await WalkerService.add({\n     userId: user.id,\n   });\n   return request(app)\n     .post(`${MAIN_ROUTE}`)\n     .send({ pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  walker.id,date: "30-12-2021"})\n     .set("authorization", `bearer ${user.token}`)\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.id).toBe(event.id);\n     });\n });\n \n \ndescribe("Test #33.1 - Create new event with errors ...", () => {\n   var newPet = PetService.add({ type: "Foca" });\n   var newService = ResourseService.add({ type: "service###" });\n   newUser = await UserService.add({\n     email: `${Date.now()}@ipca.pt`,\n     password: "test€€€€",\n     userData: {},\n   });\n   userIdToGet = newUser.id;\n   const walker = await WalkerService.add({\n     userId: user.id,\n   });\n   walkerIdToGet = walker.id;\n   const testTemplate = (data, errorMessage) => {\n     return request(app)\n       .post(MAIN_ROUTE)\n       .send(data)\n       .then((res) => {\n         expect(res.status).toBe(400);\n         expect(res.body.error).toBe(errorMessage);\n       });\n   };\n   test("Test #33.1.1 - Create new event without pets", () => {\n     testTemplate({ pets: [], serviceId = newService.id, userId: newUser.id, walkerId:  walker.id,date: "30-12-2021"}, "The pets field is required");\n   });\n   test("Test #33.1.2 -  Create new event without service", () => {\n     testTemplate({ pets: [newPet.id], serviceId = null, userId: newUser.id, walkerId:  walker.id,date: "30-12-2021"}, "The service field is required");\n   });\n   test("Test #33.1.3 - Create new event without user", () => {\n     testTemplate({ pets: [newPet.id], serviceId = newService.id, userId: null, walkerId:  walker.id,date: "30-12-2021"}, "The userId field is required");\n   });\n   test("Test #33.1.4 - Create new event without walker", () => {\n     testTemplate({ pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  null,date: "30-12-2021"}, "The walkerId field is required");\n   });\n   test("Test #33.1.5 - Create new event without date", () => {\n     testTemplate({ pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  null,date: "30-12-2021"}, "The date field is required");\n   });\n   test("Test #33.1.6 - Create new event with the date less than today", () => {\n     testTemplate({ pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  null,date: "12-12-2021"}, "The date field is wrong");\n   });\n });'},
  {action: 'Get', noun: 'Event', businessOperation: 'getRequestByUser', endpoint: '/Events/{user_id}', desc: 'Gets a list of all requests for a selected user', tests: 'test("Test #34 - Get all events by user", () => {\n   return request(app)\n     .get(${MAIN_ROUTE}/${userIdToGet})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.length).toBeGreaterThan(0);\n     });\n });'},
  {action: 'Get', noun: 'Event', businessOperation: 'getRequestByWalker', endpoint: '/Events/{walker_id}', desc: 'Gets a list of all requests for a selected walker', tests: 'test("Test #35 -  Get all events by walker", () => {\n   return request(app)\n     .get(${MAIN_ROUTE}/${walkerIdToGet})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.length).toBeGreaterThan(0);\n     });\n });'},
  {action: 'Put', noun: 'Event', businessOperation: 'changeRequestStatus', endpoint: '/Events/{request_id}', desc: 'Updates the status of a selected request', tests: 'test("Test #36 - Update event status", () => {\n   var newPet = PetService.add({ type: "Shark" });\n   var newService = ResourseService.add({ type: "service##" });\n   newUser = await UserService.add({\n     email: ${Date.now()}@ipca.pt,\n     password: "test€€€€",\n     userData: {},\n   });\n   const walker = await WalkerService.add({\n     userId: user.id,\n   });\n   const event = EventService.add({pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  walker.id})\n   return request(app)\n     .put(${MAIN_ROUTE}/${event.id})\n     .send({statusId:1})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body).toHaveProperty("userId");\n     });\n });'},
  {action: 'Get', noun: 'Event', businessOperation: 'getEventByID', endpoint: '/Events/{request_id}', desc: 'Gets the data of an event by its id', tests: 'test("Test #37 -  Get single event by id", () => {\n   var newPet = PetService.add({ type: "Shark" });\n   var newService = ResourseService.add({ type: "service##" });\n   newUser = await UserService.add({\n     email: ${Date.now()}@ipca.pt,\n     password: "test€€€€",\n     userData: {},\n   });\n   const walker = await WalkerService.add({\n     userId: user.id,\n   });\n   const event = EventService.add({pets: [newPet.id], serviceId = newService.id, userId: newUser.id, walkerId:  walker.id})\n   return request(app)\n     .get(${MAIN_ROUTE}/${event.id})\n     .set("authorization", bearer ${user.token})\n     .then((res) => {\n       expect(res.status).toBe(200);\n       expect(res.body.length).toBeGreaterThan(0);\n     });\n });'}
]